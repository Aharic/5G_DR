# Copyright 2020 (C), Oracle and/or its affiliates. All rights reserved.

#########################################################
#            Section Start: global attributes           #
#########################################################
global:
  # MYSQL configurable params
  mysql:
    primary:
      # Primary DB Connection Service IP or Hostname
      host: 192.168.200.5
      port: 3306
    secondary:
      # Secondary DB Connection Service IP or Hostname
      host: 192.168.200.28
      port: 3306

  # OCNRF's NF Instance ID is a mandatory parameter
  #
  # This is the NfInstanceId of OCNRF that will get deployed.
  #
  # Format of NfInstanceId:
  # Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122
  #
  # e.g.: 6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c
  #
  # This ID is used to uniquely identify this OCNRF instance in a Geo-Redundant Deployment.
  # Hence it is very important that the Instance ID MUST be unique across all OCNRF deployments.
  #
  nrfInstanceId: "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c"

  # Docker Registry's Host or IP from where container images will be pulled.
  dockerRegistry: occne-bastion-1:5000/ocnrf

  # Namespace and secret name for database connections
  # This secret will contain mysql db name, user to access db name and password for the user
  database:
    # Namespace where the Secret is created
    nameSpace: "ocnrf"
    # K8s Secret containing Database/user/password for services
    appUserSecretName: "appuser-secret"
    # K8s Secret containing Database/user/password for DB Hooks for creating tables
    privilegedUserSecretName: "privilegeduser-secret"

  #>==================================================
  # Resources allocated for execution of jobs associated with hooks
  hookJobResources:
     limits:
       cpu: 2
       memory: 2Gi
     requests:
       cpu: 1
       memory: 1Gi
  #<==================================================

  # CNCConsole integration flag
  #
  # if cncConsoleDeployed is false, then nrfConfiguration micro-service must
  # be deployed with service type as LoadBalancer (type: LoadBalancer)
  # Otherwise nrfConfiguration micro-service should be deployed with service
  # type as ClusterIP (type: ClusterIP)
  cncConsoleDeployed: true

  # serviceAccountName is a mandatory parameter
  #
  # Kubernetes Secret resource is used for below use cases in OCNRF
  # - For providing MYSQL DB Details to micro-services
  # - For providing NRF's Private Key, NRF's Certificate and CA Certificate Details to Ingress/Egress Gateway for TLS
  # - For providing NRF's Private and NRF's Public Keys to nfAccessToken micro-service for Digitally Signing AccessTokenClaims.
  # - For providing Producer/Consumer NF's Service/Endpoint details for routing messages from/to Egress/Ingress Gateway.
  #
  # The Secret(s) can be under same namespace where OCNRF is getting deployed (recommended) or
  # Operator can choose to use different namespaces for different secret(s).
  #
  # If all the Secret(s) are under same namespace as OCNRF, then Kubernetes Role can be binded with the given ServiceAccount.
  # Otherwise ClusterRole needs to be binded with the given ServiceAccount.
  #
  # The Role/ClusterRole needs to be created with resources: (services, configmaps, pods, secrets, endpoints)  and (verbs: get, watch, list)
  #
  # E.g:
  #
  #     apiVersion: rbac.authorization.k8s.io/v1
  #     kind: Role
  #     metadata:
  #       labels:
  #       name:  ocnrf-role
  #       namespace: ocnrf
  #     rules:
  #       - apiGroups:
  #           - ""
  #         resources:
  #           - services
  #           - configmaps
  #           - pods
  #           - secrets
  #           - endpoints
  #         verbs:
  #           - get
  #           - list
  #           - watch
  serviceAccountName: ocnrf-serviceaccount


  # ********  Sub-Section Start: Ingress Gateway Global Parameters   ********
  #**************************************************************************


  # If Static load balancer IP needs to be set, then set staticIpAddressEnabled flag to true and provide value for staticIpAddress
  # Else random IP will be assigned by the External LoadBalancer from its IP Pool
  staticIpAddressEnabled: false
  staticIpAddress: 10.75.212.50

  # If Static node port needs to be set, then set staticNodePortEnabled flag to true and
  # provide value for staticHttpNodePort or staticHttpsNodePort
  # Else random node port will be assigned by K8
  staticNodePortEnabled: false
  staticHttpNodePort: 30080
  staticHttpsNodePort: 30443

  # Service Port on which OCNRF's Ingress Gateway will be exposed
  # If enableIncomingHttp is true, publicHttpSignalingPort will be used as HTTP/2.0 Port (unsecured)
  # If enableIncomingHttps is true, publicHttpsSignallingPort Port will be used as HTTPS/2.0 Port (secured TLS)
  publicHttpSignalingPort: 80
  publicHttpsSignallingPort: 443

  # ********  Sub-Section End: Ingress Gateway Global Parameters   ********
  #**************************************************************************


  # ********  Sub-Section Start: Custom Extension Global Parameters ********
  #**************************************************************************

  customExtension:
    allResources:
      labels: {}
      annotations: {}

    lbServices:
      labels: {}
      annotations: {}

    lbDeployments:
      labels: {}
      annotations: {}

    nonlbServices:
      labels: {}
      annotations: {}

    nonlbDeployments:
      labels: {}
      annotations: {}

  # ********  Sub-Section End: Custiom Extensions Global Parameters ********
  #**************************************************************************


  # ********  Sub-Section Start: Prefix/Suffix Global Parameters ************
  #**************************************************************************

  k8sResource:
    container:
      prefix:
      suffix:

  # ********  Sub-Section End: Prefix/Suffix Global Parameters *************
  #**************************************************************************


#########################################################
#            Section End  : global attributes           #
#########################################################


#########################################################
#            Section Start: ingressgateway attributes   #
#########################################################
ingress-gateway:
  global:
    # Service Type
    type: LoadBalancer

  # This flag is for enabling/disabling HTTP/2.0  (insecure) in Ingress Gateway.
  # If the value is set to false, NRF will not accept any HTTP/2.0 (insecure) Traffic
  # If the value is set to true, NRF will accept HTTP/2.0 (insecure) Traffic
  enableIncomingHttp: true

  # This flag is for enabling/disabling HTTPS/2.0  (secured TLS) in Ingress Gateway.
  # If the value is set to false, NRF will not accept any HTTPS/2.0 (secured) Traffic
  # If the value is set to true, NRF will accept HTTPS/2.0 (secured) Traffic
  enableIncomingHttps: false

  # Mandatrory: This flag needs to set it "true" is Service Mesh would be present where NRF will be deloyed
  serviceMeshCheck: false

  # Ingress Gateway Service Container Image Details
  image:
    # Ingress Gateway image name
    name: ocingress_gateway
    # tag name of image
    tag: 1.7.7
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  # Ingress Gateway Init  Container Image Details
  initContainersImage:
    # init Containers image name
    name: configurationinit
    # tag name of init Container image
    tag: 1.2.0
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  # Ingress Gateway Update Container Image Details
  updateContainersImage:
    # update Containers image name
    name: configurationupdate
    # tag name of update Container image
    tag: 1.2.0
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  # enable Jaeger tracing
  jaegerTracingEnabled: true
  openTracing :
    jaeger:
      udpSender:
        # Update this configuration when jaeger tracing is enabled.
        # udpsender host
        host: "occne-tracer-jaeger-agent.occne-infra.svc.rockford"
        # udpsender port
        port: 6831
      # Jaeger message sampler. Value range: 0 to 1
      # e.g. Value 0: No Trace will be sent to Jaeger collector
      # e.g. Value 0.3: 30% of message will be sampled and will be sent to Jaeger collector
      # e.g. Value 1: 100% of message (i.e. all the messages) will be sampled and will be sent to Jaeger collector
      probabilisticSampler: 0.5

  # Allowed CipherSuites for TLS1.2
  cipherSuites:
  - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
  - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
  - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

  service:
    # configuration under ssl section is mandatory if enableIncomingHttps is configured as "true"
    ssl:
      # OCNRF private key details for HTTPS
      # Secret Name, Namespace, Keydetails
      privateKey:
        k8SecretName: ocingress-secret
        k8NameSpace: ocnrf
        rsa:
          fileName: rsa_private_key_pkcs1.pem
        ecdsa:
          fileName: ssl_ecdsa_private_key.pem

      # OCNRF certificate details for HTTPS
      # Secret Name, Namespace, Keydetails
      certificate:
        k8SecretName: ocingress-secret
        k8NameSpace: ocnrf
        rsa:
          fileName: ssl_rsa_certificate.crt
        ecdsa:
          fileName: ssl_ecdsa_certificate.crt

      # OCNRF CA details for HTTPS
      caBundle:
        k8SecretName: ocingress-secret
        k8NameSpace: ocnrf
        fileName: caroot.cer

      # OCNRF
      # KeyStore password for HTTPS
      # Secret Name, Namespace, Keydetails
      keyStorePassword:
        k8SecretName: ocingress-secret
        k8NameSpace: ocnrf
        fileName: ssl_keystore.txt

      # OCNRF TrustStore password for HTTPS
      # Secret Name, Namespace, Keydetails
      trustStorePassword:
        k8SecretName: ocingress-secret
        k8NameSpace: ocnrf
        fileName: ssl_truststore.txt

      # Initial Algorithm for HTTPS
      # Supported Values: ES256, RSA256
      initialAlgorithm: RSA256

    # Labels and Annotations that are specific to service ingressgateway are added here.
    customExtension:
      labels: {}
      annotations: {}

  # Labels and Annotations that are specific to deployment ingressgateway are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}


  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level:
      root: WARN
      ingress: WARN
      oauth: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      #Container's cpu and memory
      cpu: 4
      # Init-service cpu limit
      initServiceCpu: 1
      # Update-service cpu limit
      updateServiceCpu: 1
      # The Container's memory limit
      memory: 4Gi
      # Init-service memory limit
      initServiceMemory: 1Gi
      # Update-service memory limit
      updateServiceMemory: 1Gi
    requests:
      # The Container's memory cpu
      cpu: 4
      # Init-service cpu limit
      initServiceCpu: 1
      # Update-service cpu limit
      updateServiceCpu: 1
      # The Container's memory limit
      memory: 4Gi
      # Init-service memory limit
      initServiceMemory: 1Gi
      # Update-service memory limit
      updateServiceMemory: 1Gi
    target:
      averageCpuUtil: 80
  #<==================================================

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2

#########################################################
#            Section End  : ingressgateway attributes   #
#########################################################


#########################################################
#            Section Start: egressgateway attributes   #
#########################################################
egress-gateway:
  # This flag is for enabling/disabling HTTPS/2.0  (secured TLS) in Egress Gateway.
  # If the value is set to false, NRF will send only HTTP/2.0 (unsecured) Egress Traffic
  # If the value is set to true, NRF will send only HTTPS/2.0 (secured) Egress Traffic
  enableOutgoingHttps: false

  # Egress Gateway Service Container Image Details
  deploymentEgressGateway:
    # Egress Gateway image name
    image: ocegress_gateway
    # tag name of image
    imageTag: 1.7.7
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  # Egress Gateway Init Container Image Details
  initContainersImage:
    # init Containers image name
    name: configurationinit
    # tag name of image
    tag: 1.2.0
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  # Egress Gateway Update Container Image Details
  updateContainersImage:
    # update Containers image name
    name: configurationupdate
    # tag name of image
    tag: 1.2.0
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: Always

  # enable Jaeger tracing
  jaegerTracingEnabled: true
  openTracing :
    jaeger:
      udpSender:
        # Update this configuration when jaeger tracing is enabled.
        # udpsender host
        host: "occne-tracer-jaeger-agent.occne-infra.svc.rockford"
        # udpsender port
        port: 6831
      # Jaeger message sampler. Value range: 0 to 1
      # e.g. Value 0: No Trace will be sent to Jaeger collector
      # e.g. Value 0.3: 30% of message will be sampled and will be sent to Jaeger collector
      # e.g. Value 1: 100% of message (i.e. all the messages) will be sampled and will be sent to Jaeger collector
      probabilisticSampler: 0.5

  # ********  Sub-Section Start: SCP released Parameters ********
  #*******************************************************************

  # Using SCP as an Proxy in Egress Gateway
  # If it is configured as false, SCP will not be used as an proxy.
  #   Messages will be directly sent to the Producers/HTTP Servers.
  # If it is configured as true, SCP will be used as an Proxy for
  #    delivering messages to the Producers/HTTP Servers.
  scpIntegrationEnabled: false

  # SCP Configuration For Egress Gateway
  # All the SCP related configuration will be used only
  # if scpIntegrationEnabled is set to true.
  #
  # SCP's HTTP Host/IP and Port Combination.
  # This will be while sending HTTP/2.0 (unsecured) traffic
  scpHttpHost: localhost
  scpHttpPort: 80

  # SCP's HTTPS Host/IP and Port Combination.
  # This will be while sending HTTPS/2.0 (secured) traffic
  scpHttpsHost: localhost
  scpHttpsPort: 443

  # SCP's API Prefix. (Applicable only for SCP with TLS enabled)
  # This will be used for constructing the Egress messgage's APIROOT while proxying message to SCP.
  # Change this value to SCP's apiprefix. "/" is not expected to be provided along.
  scpApiPrefix: /

  # SCP's default scheme  when 3gpp-sbi-target-apiroot header is missing
  scpDefaultScheme: https

  # ********  Sub-Section End : SCP released Parameters ********
  #*******************************************************************

  # Allowed CipherSuites for TLS1.2
  cipherSuites:
    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

  service:
    # configuration under ssl section is mandatory if enableOutgoingHttps is configured as "true"
    ssl:
      # OCNRF private key details for HTTPS
      # Secret Name, Namespace, Keydetails
      privateKey:
        k8SecretName: ocegress-secret
        k8NameSpace: ocnrf
        rsa:
          fileName: ssl_rsa_private_key.pem
        ecdsa:
          fileName: ssl_ecdsa_private_key.pem

      # OCNRF certificate details for HTTPS
      # Secret Name, Namespace, Keydetails
      certificate:
        k8SecretName: ocegress-secret
        k8NameSpace: ocnrf
        rsa:
          fileName: ssl_rsa_certificate.crt
        ecdsa:
          fileName: ssl_ecdsa_certificate.crt

      # OCNRF CA details for HTTPS
      caBundle:
        k8SecretName: ocegress-secret
        k8NameSpace: ocnrf
        fileName: ssl_cabundle.crt

      # OCNRF KeyStore password for HTTPS
      # Secret Name, Namespace, Keydetails
      keyStorePassword:
        k8SecretName: ocegress-secret
        k8NameSpace: ocnrf
        fileName: ssl_keystore.txt

      # OCNRF TrustStore password for HTTPS
      # Secret Name, Namespace, Keydetails
      trustStorePassword:
        k8SecretName: ocegress-secret
        k8NameSpace: ocnrf
        fileName: ssl_truststore.txt

      # Initial algorithm for HTTPS
      # Support Values: ES256, RSA256
      initialAlgorithm: RSA256

    # Service Type
    type: ClusterIP

    # Labels and Annotations that are specific to service egressgateway are added here.
    customExtension:
      labels: {}
      annotations: {}

    # Labels and Annotations that are specific to deployment egressgateway are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}


  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level:
      root: WARN
      egress: WARN
      oauth: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 4
      initServiceCpu: 1
      updateServiceCpu: 1
      memory: 4Gi
      # Init-service memory limit
      initServiceMemory: 1Gi
      # Update-service memory limit
      updateServiceMemory: 1Gi
    requests:
      initServiceCpu: 1
      updateServiceCpu: 1
      # Init-service memory limit
      initServiceMemory: 1Gi
      # Update-service memory limit
      updateServiceMemory: 1Gi
      cpu: 4
      memory: 4Gi
    target:
      averageCpuUtil: 80
  #<==================================================

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2

#########################################################
#            Section End  : egressgateway attributes   #
#########################################################


#########################################################
#            Section Start: nfregistration attributes   #
#########################################################
# NRF microservices
nfregistration:
  image:
    # image name
    name: ocnrf-nfregistration
    # tag name of image
    tag: 1.7.2
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 4
      memory: 2Gi
    requests:
      cpu: 4
      memory: 2Gi
    target:
      averageCpuUtil: 80
  #<==================================================

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2


  # enable/ disable server compression gzip
  responseCompressionGzip: true

  service:
    # Service Type
    type: ClusterIP

    # Labels and Annotations that are specific to service nfRegistration are added here.
    customExtension:
      labels: {}
      annotations: {}

  # Labels and Annotations that are specific to deployment nfRegistration are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}

#########################################################
#            Section End  : nfregistration attributes   #
#########################################################


#########################################################
#            Section Start: nfsubscription attributes   #
#########################################################
nfsubscription:
  image:
    # image name
    name: ocnrf-nfsubscription
    # tag name of image
    tag: 1.7.2
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 2
      memory: 2Gi
    target:
      averageCpuUtil: 80
  #<==================================================

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2

  service:
    # Service Type
    type: ClusterIP

    # Labels and Annotations that are specific to service nfSubscription are added here.
    customExtension:
      labels: {}
      annotations: {}

  # Labels and Annotations that are specific to deployment nfSubscription are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}


#########################################################
#            Section End  : nfsubscription attributes   #
#########################################################


#########################################################
#            Section Start: nrfauditor attributes       #
#########################################################
nrfauditor:
  image:
    # image name
    name: ocnrf-nrfauditor
    # tag name of image
    tag: 1.7.2
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 4
      memory: 2Gi
    requests:
      cpu: 4
      memory: 2Gi
  #<==================================================


  service:
    # Service Type
    type: ClusterIP

    # Labels and Annotations that are specific to service nrfAuditor are added here.
    customExtension:
      labels: {}
      annotations: {}

  #Labels and Annotations that are specific to deployment nrfAuditor are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}

#########################################################
#            Section End  : nrfauditor attributes       #
#########################################################


#########################################################
#            Section Start: nfdiscovery attributes      #
#########################################################
nfdiscovery:
  image:
    # image name
    name: ocnrf-nfdiscovery
    # tag name of image
    tag: 1.7.2
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 4
      memory: 2Gi
    requests:
      cpu: 4
      memory: 2Gi
    target:
      averageCpuUtil: 80
  #<==================================================

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2

  service:
    # Service Type
    type: ClusterIP

    # Labels and Annotations that are specific to service nfDiscovery are added here.
    customExtension:
      labels: {}
      annotations: {}

  #Labels and Annotations that are specific to deployment nfDiscovery are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}

#########################################################
#            Section End  : nfdiscovery attributes      #
#########################################################


#########################################################
#            Section Start: nrfconfiguration attributes #
#########################################################
nrfconfiguration:
  image:
    # image name
    name: ocnrf-nrfconfiguration
    # tag name of image
    tag: 1.7.2
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: IfNotPresent

  service:
    # If Static load balancer IP needs to be set, then set staticIpAddressEnabled flag to true and provide value for staticIpAddress
    # Else random IP will be assigned by the External LoadBalancer from its IP Pool
    staticIpAddressEnabled: false
    staticIpAddress: 10.75.212.50

    # If Static node port needs to be set, then set staticNodePortEnabled flag to true and provide value for staticNodePort
    # Else random node port will be assigned by K8
    staticNodePortEnabled: false
    staticNodePort: 30076

    # Service Type
    type: LoadBalancer

    #Labels and Annotations that are specific to service nrfConfiguration are added here.
    customExtension:
      labels: {}
      annotations: {}

  #Labels and Annotations that are specific to deployment nrfConfiguration are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 2
      memory: 2Gi
    target:
      averageCpuUtil: 80
  #<==================================================


  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

#########################################################
#            Section End  : nrfconfiguration attributes #
#########################################################


#########################################################
#            Section Start: nfaccesstoken attributes    #
#########################################################
# Details of NF Access Token Microservice
nfaccesstoken:
  # Flag to disable Oauth micro-service
  enabled: true
  # Image Details
  image:
    name: ocnrf-nfaccesstoken
    tag: 1.7.2
    pullPolicy: IfNotPresent

  # Image details for Access token Key certificate infrastructure
  initContainersImage:
    name: configurationinit
    tag: 1.2.0
    pullPolicy: IfNotPresent

  updateContainersImage:
    name: configurationupdate
    tag: 1.2.0
    pullPolicy: IfNotPresent

  # Access token key certificate infrastructure details
  oauth:
    # Issuer OCNRF's NF Instance ID is a Mandatory parameter if
    # Access Token Service is deployed (i.e. nfaccesstoken.enabled= true)
    #
    # This is NRF Instance ID that will be used for signing AccessTokenClaim (iss IE of AccessTokenClaim).
    #
    # If NRF needs to issue AccessTokenClaim using it's own NF instance ID then
    # the nrfInstanceId configured in the global section (global.nrfInstanceId) needs to configured here again.
    #
    # If NRF needs to issue AccessTokenClaim using a common/virtual then
    # a common/virtual NF instance ID needs to be configured here (along with the
    # common/virtual PrivateKey and Certificate Pair). The same NF instance id
    # and PrivateKey and Certificate Pair needs to be configured in all other NRFs
    # as well so that tokens issues by all the NRF can be validated using a Single
    # NfIstanceId and KeyPair.
    nrfInstanceId: "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c"

    # OCNRF Private key details
    privateKey:
      # K8 Secret Name for OCNRF Private key
      k8SecretName: ocnrfaccesstoken-secret
      # Namespace for OCNRF Private key
      k8NameSpace: ocnrf
      # Different key file names
      rsa:
        fileName: /home/cloud-user/NRF1.7.2/NRFAuthToken/NRFAuthKey.pem
     # ecdsa:
     #   fileName: ecdsa_private_key.pem
    # OCNRF certificate
    certificate:
      # K8 Secret Name for OCNRF certificate
      k8SecretName: ocnrfaccesstoken-secret
      # Namespace for OCNRF certificate
      k8NameSpace: ocnrf
      # OCNRF certificates
      rsa:
        fileName: home/cloud-user/NRF1.7.2/NRFAuthToken-Cert.pem
    #  ecdsa:
     #   fileName: ecdsa_certificate.crt
    # Keystore password configuration from Secret
    keyStorePassword:
      # K8 Secret Name for keystore password
      k8SecretName: ocnrfaccesstoken-secret
      # Namespace secret Name for keystore password
      k8NameSpace: ocnrf
      # KeyStore password file
      fileName: /home/cloud-user/NRF1.7.2/NRFKeyStorePassword.txt
    # Initial Algorithm for Access Token key certificate infrastucture
    initialAlgorithm: RSA256

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 4
      initServiceCpu: 1
      updateServiceCpu: 1
      memory: 2Gi
      updateServiceMemory: 1Gi
      initServiceMemory: 1Gi
    requests:
      cpu: 4
      initServiceCpu: 1
      updateServiceCpu: 1
      memory: 2Gi
      updateServiceMemory: 1Gi
      initServiceMemory: 1Gi
    target:
      averageCpuUtil: 80
  #<==================================================


  log:
    # setting logging level
    # Possible values - OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    level: WARN

  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2

  service:
    # Service Type
    type: ClusterIP

    #Labels and Annotations that are specific to service nfAccesstoken are added here.
    customExtension:
      labels: {}
      annotations: {}

  #Labels and Annotations that are specific to deployment nfAccesstoken are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}

#########################################################
#            Section End  : nfaccesstoken attributes    #
#########################################################


#########################################################
#            Section Start  : appinfo attributes    #
#########################################################
appinfo:
  # Image Details
  image: app_info
  imageTag: 1.7.3
  pullPolicy: IfNotPresent

  #>==================================================
  # Resource details
  resources:
    limits:
      cpu: 200m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 1Gi
  #<==================================================

  service:
    type: ClusterIP

    #Labels and Annotations that are specific to service appinfo are added here.
    customExtension:
      labels: {}
      annotations: {}

  #Labels and Annotations that are specific to deployment appinfo are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}
#########################################################
#            Section End  : appinfo attributes    #
#########################################################
