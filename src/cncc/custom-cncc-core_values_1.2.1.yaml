#########################################################
#            Section Start: global attributes           #
#########################################################
global:

  # ********  Sub-Section Start: Common Global Parameters ********
  #***************************************************************
  
  dockerRegistry: cne-bastion-1:5000 
  
  serviceAccountName: "cncc-core-sa"

  customExtension:
    allResources:
      labels: {}
      annotations: {}
      
    lbServices:
      labels: {}
      annotations: {}

    lbDeployments:
      labels: {}
      annotations: {}
      #  traffic.sidecar.istio.io/excludeInboundPorts: "\"8081\""
      #  oracle.com/cnc: "\"true\""      

    nonlbServices:
      labels: {}
      annotations: {}

    nonlbDeployments:
      labels: {}
      annotations: {}

  # ********  Sub-Section End: Common Global Parameters ********
  #*************************************************************

  # ********  Sub-Section Start: Ingress Gateway Global Parameters ********
  #************************************************************************

  # If https is enabled, this Port would be HTTP/1.0 Port (unsecured)
  # If https is disabled, this Port would be HTTPS/1.0 Port (secured SSL)
  publicHttpSignalingPort: 8080
  publicHttpsSignallingPort: 8443
    
  #Specify type of service - Possible values are :- ClusterIP, NodePort, LoadBalancer and ExternalName
  type: LoadBalancer
    
  #Enable or disable IP Address allocation from Metallb Pool
  metalLbIpAllocationEnabled: true
  
  #Address Pool Annotation for Metallb
  metalLbIpAllocationAnnotation: "metallb.universe.tf/address-pool: oam"
    
  #If Static load balancer IP needs to be set, then set staticIpAddressEnabled flag to true and provide value for staticIpAddress
  #Else random IP will be assigned by the metalLB from its IP Pool
  staticIpAddressEnabled: false
  staticIpAddress: ""
  
  #If Static node port needs to be set, then set staticNodePortEnabled flag to true and provide value for staticNodePort
  #Else random node port will be assigned by K8
  staticNodePortEnabled: true
  staticHttpNodePort: 30075
  staticHttpsNodePort: 30043
  
  nodeSelector:
    nodeKey: ""
    nodeValue: ""
    
  k8sResource:
    container:
      prefix: ""
      suffix: ""

# ********  Sub-Section End: Ingress Gateway Global Parameters ********
#**********************************************************************
#########################################################
#            Section End  : global attributes           #
#########################################################

###############################################################
#            Section Start  : cmservice attributes            #
###############################################################
cmservice:
  envLoggingLevelApp: WARN
  
  image:
    # image name
    name: cncc/cncc-cmservice
    # tag name of image
    tag: 1.2.1
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never    
    pullPolicy: Always
   
  # Resource details
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
   
  # Deployment details   
  deployment:
    customExtension:
      labels: {}
      annotations: {}
    
    envManageNF: SCP, NRF, UDR, POLICY
    # This is the name of product which appears as brand name and can be used to mention site name as well.
    # envSystemName: CNCC - Site Name 
    envSystemName: CNCC
    # This is the version of product which appears with brand name.
    envNFVersion: 1.2.1
    # This is the name of the Project that appears on the Window
    cmWindowName: CNCC
    # Applicable for POLICY deployment, this enables Import Export buttons. 
    # Make cmEnableImportExport : true in case of POLICY deployment
    cmEnableImportExport: true
    
    nodeSelectorEnabled: false
    nodeSelectorKey: zone
    nodeSelectorValue: app
    
    dependenciesLogging:
      - name: logging.level.org.springframework
        value: WARN
      - name: logging.level.io.undertow
        value: WARN

  service:
    customExtension:
      labels: {}
      annotations: {}
    
    http:
      port: 8442
    
    type: ClusterIP
#########################################################
#            Section End  : cmservice attributes        #
#########################################################

###############################################################
#         Section Start  : ingress gateway attributes         #
###############################################################
ingress-gateway:
  image:
    # image name
    name: cncc/cncc-apigateway
    # tag name of image
    tag: 1.2.1
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: Always
    
  initContainersImage:
    # inint Containers image name
    name: cncc/apigw-configurationinit
    # tag name of init Container image
    tag: 1.2.1
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: Always
    
  updateContainersImage:
    # update Containers image name
    name: cncc/apigw-configurationupdate
    # tag name of update Container image
    tag: 1.2.1
    # Pull Policy - Possible Values are:- Always, IfNotPresent, Never
    pullPolicy: Always    
    
  service:
    ssl:
      tlsVersion: TLSv1.2
      
      privateKey:
        k8SecretName: cncc-core-ingress-secret
        k8NameSpace: cncc
        rsa:
          fileName: rsa_private_key_pkcs1.pem
        ecdsa:
          fileName: ssl_ecdsa_private_key.pem
  
      certificate:
        k8SecretName: cncc-core-ingress-secret
        k8NameSpace: cncc
        rsa:
          fileName: ssl_rsa_certificate.crt
        ecdsa:
          fileName: ssl_ecdsa_certificate.crt
  
      caBundle:
        k8SecretName: cncc-core-ingress-secret
        k8NameSpace: cncc
        fileName: caroot.cer
  
      keyStorePassword:
        k8SecretName: cncc-core-ingress-secret
        k8NameSpace: cncc
        fileName: ssl_keystore.txt
  
      trustStorePassword:
        k8SecretName: cncc-core-ingress-secret
        k8NameSpace: cncc
        fileName: ssl_truststore.txt
  
      initialAlgorithm: RSA256
  
    # Labels and Annotations that are specific to service ingressgateway are added here.
    customExtension:
      labels: {}
      annotations: {}
  
    # Labels and Annotations that are specific to deployment ingressgateway are added here.
  deployment:
    customExtension:
      labels: {}
      annotations: {}
  
  ports:
    # ContainerPort represents a network port in a single container
    containerPort: 8081
    containersslPort: 8443
    actuatorPort: 9090
  
  # Set the root log level
  log:
    level: 
      root: WARN
      ingress: INFO
      cncc:
        security: INFO
  
  readinessProbe:
    # tells the kubelet that it should wait second before performing the first probe
    initialDelaySeconds: 30
    # Number of seconds after which the probe times out
    timeoutSeconds: 3
    # specifies that the kubelet should perform a liveness probe every xx seconds
    periodSeconds: 10
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # When a Pod starts and the probe fails, Kubernetes will try failureThreshold times before giving up
    failureThreshold: 3
    
  livenessProbe:
    # tells the kubelet that it should wait second before performing the first probe
    initialDelaySeconds: 30
    # Number of seconds after which the probe times out
    timeoutSeconds: 3
    # specifies that the kubelet should perform a liveness probe every xx seconds
    periodSeconds: 15
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # When a Pod starts and the probe fails, Kubernetes will try failureThreshold times before giving up
    failureThreshold: 3
  
  # Resource details
  resources:
    limits:
      cpu: 2
      initServiceCpu: 1
      updateServiceCpu: 1
      memory: 2Gi
      updateServiceMemory: 1Gi
      initServiceMemory: 1Gi      
    requests:
      cpu: 1
      initServiceCpu: 0.5
      updateServiceCpu: 0.5
      memory: 1Gi
      updateServiceMemory: 0.5Gi
      initServiceMemory: 0.5Gi      
    target:
      averageCpuUtil: 80
    
  # Nuber of Pods must always be available, even during a disruption.
  minAvailable: 1
  # Min replicas to scale to maintain an average CPU utilization
  minReplicas: 1
  # Max replicas to scale to maintain an average CPU utilization
  maxReplicas: 2
  
  allowedCipherSuites:
    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

  cipherSuites:
    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  
  
  # To Initialize SSL related infrastructure in init/update container
  initssl: false
  #Server Configuration for http and https support
  enableIncomingHttp: true
  enableIncomingHttps: false
  
  ingressGwCertReloadEnabled: false
  ingressGwCertReloadPath: /ingress-gw/certificate/reload

  # Routes Configurations
  routesConfig:
  # Note: Update FQDN and PORT with actual values. If not remove those routes else CNCC will fail to deploy. 
  # CNCC requires complete routes and not placeholders.
  # Default mapping should be the last route entry.
  # Examples for routes
  #- id: scp_configuration
  #  uri: http://10.75.153.121:31131
  #  path: /soothsayer/v1/**
  #- id: default_configuration
  #  uri: http://cncc-core-cmservice.cncc.svc.cluster.local:8442
  #  path: /**
#  - id: scp_configuration
#    uri: http://<FQDN>:<PORT>
#    path: /soothsayer/v1/**
  - id: nrf_configuration
    uri: http://10.75.151.167:80
    path: /nrf-configuration/v1/**
#  - id: udr1
#    uri: http://<FQDN>:<PORT>
#    path: /nudr-dr-prov/**,/nudr-dr-mgm/**,/nudr-group-id-map-prov/**,/slf-group-prov/**
#  - id: udr2
#    uri: http://<FQDN>:<PORT>
#    path: /nudr-config/**
#  - id: policy_configuration
#    uri: http://<FQDN>:<PORT>
#    path: /policyapi/**
    filters:
      rewritePath: "/policyapi(?<segment>/?.*), $\\{segment}"
  - id: default_configuration # Default configuration should be the last routesConfig entry
    uri: http://cncc-core-cmservice.cncc.svc.cluster.local:8442
    path: /**

  nodeSelector:
    nodeKey: ""
    nodeValue: ""

  # CNCC configuration
  cncc:
    # Enable cncc feature including iam
    enabled: true
    # Enable security logs
    securityLogEnabled: true
    # Core Configuration
    core:
      # Session Timeout Value in Seconds. Default: 1800, Minimum: 300, Maximum: 7200
      sessionTimeoutSeconds: 1800
    # IAM Configuration
    # uri should include the CNCC IAM ingress-gateway externalIp and service port (e.g. http://10.75.182.72:8080)
    iam:
      uri: http://10.75.151.219:8080
#########################################################
#            Section End  : ingress gateway attributes  #
#########################################################

apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: cncc-iam-exclude-mtls
  namesapce: cncc
spec:
  host: cncc-iam-ingress-gateway.cncc.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE

