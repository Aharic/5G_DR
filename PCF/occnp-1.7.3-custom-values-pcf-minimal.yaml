# Copyright 2019 (C), Oracle and/or its affiliates. All rights reserved.
# section:- global
global:

  # Enable PCF services
  userServiceEnable: true
  amServiceEnable: true
  smServiceEnable: true
  ueServiceEnable: true
  nrfClientNfDiscoveryEnable: true
  nrfClientNfManagementEnable: true
  appinfoServiceEnable: true
  performanceServiceEnable: true
  diamConnectorEnable: true
  diamGatewayEnable: true

  # Enable below services if required. Refer install guide for more details 
  policydsEnable: false
  ldapGatewayEnable: false
  bindingEnable: false

  # Disable PCRF services 
  pcrfCoreEnable: false
  soapConnectorEnable: false

  # Docker registry name
  dockerRegistry: 'cne-bastion-1:5000/occnp'
  # Primary MYSQL Host IP or Hostname
  envMysqlHost: '192.168.200.4'
  envMysqlPort: '3306'
  # Jaegar hostname
  envJaegerAgentHost: ''
  # K8s secret object name containing OCPCF MYSQL UserName and Password
  dbCredSecretName: 'occnp-db-pass'
  privilegedDbCredSecretName: 'occnp-admin-db-pass'
  #Release DB name containing release version details
  releaseDbName: 'occnp_release'

  # -----Ingress Gateway Settings - BEGIN-----
  # If httpsEnabled is false, this Port would be HTTP/2.0 Port (unsecured)
  publicHttpSignalingPort: 80
  # If httpsEnabled is true, this Port would be HTTPS/2.0 Port (secured SSL)
  publicHttpsSignallingPort: 443

  # Enable or disable IP Address allocation from Metallb Pool
  metalLbIpAllocationEnabled: false

  # Address Pool Annotation for Metallb
  metalLbIpAllocationAnnotation: "metallb.universe.tf/address-pool: signaling"
  # -----Ingress Gateway Settings - END-----

  # API root of PCF that will be used in notification URLs generated by PCF's when sending request to other producer NFs
  #If not configured then the ingress gateway service name and port will be used as default value. ex:"https://<Helm name>-occnp-ingress-gateway:443"
  pcfApiRoot: ''

  deploymentNrfClientService:
    #K8s namespace of PCF
    envNfNamespace: 'ocpcf'
    #same as pcfApiRoot
    nfApiRoot: ''

am-service:
  envMysqlDatabase: occnp_pcf_am

sm-service:
  envMysqlDatabase: occnp_pcf_sm
  envMysqlDatabaseUserService: occnp_pcf_user
  defaultBsfApiRoot: 'https://bsf.apigateway:8001'
  auditSmSessionTtl: 86400
  auditSmSessionMaxTtl: 172800
  bindingSvcEnabled: false

user-service:
  envMysqlDatabase: occnp_pcf_user

config-server:
  envMysqlDatabase: occnp_config_server

queryservice:
  envMysqlDatabaseSmService: occnp_pcf_sm
  envMysqlDatabaseUserService: occnp_pcf_user

audit-service:
  envMysqlDatabase: occnp_audit_service

nrf-client:
  # This config map is for providing inputs to NRF-Client
  configmapApplicationConfig:
    # primaryNrfApiRoot - Primary NRF Hostname and Port
    # SecondaryNrfApiRoot - Secondary NRF Hostname and Port
    # retryAfterTime - Default downtime(in ISO 8601 duration format) of an NRF detected to be unavailable.
    # nrfClientType - The NfType of the NF registering
    # nrfClientSubscribeTypes - the NFType for which the NF wants to subscribe to the NRF.
    # appProfiles - The NfProfile of the NF to be registered with NRF.
    # enableF3 - Support for 29.510 Release 15.3
    # enableF5 - Support for 29.510 Release 15.5
    # renewalTimeBeforeExpiry - Time Period(seconds) before the Subscription Validity time expires.
    # validityTime - The default validity time(days) for subscriptions.
    # enableSubscriptionAutoRenewal - Enable Renewal of Subscriptions automatically.
    # acceptAdditionalAttributes - Enable additionalAttributes as part of 29.510 Release 15.5
    profile: |-
      [appcfg]
      primaryNrfApiRoot=http://10.75.151.217:30842
      secondaryNrfApiRoot=http://nrf2-api-gateway.svc:80
      retryAfterTime=PT120S
      nrfClientType=PCF
      nrfClientSubscribeTypes=CHF,UDR,BSF
      appProfiles=[{ "nfInstanceId": "fe7d992b-0541-4c7d-ab84-c6d70b1b0123", "nfType": "PCF", "nfStatus": "REGISTERED", "plmnList": null, "nsiList": null, "fqdn": "occnp-ocpm-ingress-gateway.ocpcf.svc", "interPlmnFqdn": null, "ipv4Addresses": null, "ipv6Addresses": null, "priority": null, "capacity": null, "load": 80, "locality": null, "pcfInfo": { "dnnList": [ "internet", "volte" ], "supiRanges": [ { "start": "12123444444", "end": "232332323323232", "pattern": null } ] }, "customInfo": null, "recoveryTime": null, "nfServices": [ { "serviceInstanceId": "03063893-cf9e-4f7a-9827-067f6fa9dd01", "serviceName": "npcf-am-policy-control", "versions": [ { "apiVersionInUri": "v1", "apiFullVersion": "1.0.0", "expiry": null } ], "scheme": "http", "nfServiceStatus": "REGISTERED", "fqdn": "occnp-ocpm-ingress-gateway.ocpcf.svc", "interPlmnFqdn": null, "ipEndPoints": null, "apiPrefix": null, "defaultNotificationSubscriptions": null, "allowedPlmns": null, "allowedNfTypes": [ "AMF", "NEF" ], "allowedNfDomains": null, "allowedNssais": null, "priority": null, "capacity": null, "load": null, "recoveryTime": null, "supportedFeatures": null }, { "serviceInstanceId": "03063893-cf9e-4f7a-9827-067f6fa9dd02", "serviceName": "npcf-smpolicycontrol", "versions": [ { "apiVersionInUri": "v1", "apiFullVersion": "1.0.0", "expiry": null } ], "scheme": "http", "nfServiceStatus": "REGISTERED", "fqdn": "occnp-ocpm-ingress-gateway.ocpcf.svc", "interPlmnFqdn": null, "ipEndPoints": null, "apiPrefix": null, "defaultNotificationSubscriptions": null, "allowedPlmns": null, "allowedNfTypes": [ "SMF", "NEF", "AF" ], "allowedNfDomains": null, "allowedNssais": null, "priority": null, "capacity": null, "load": null, "recoveryTime": null, "supportedFeatures": null }, { "serviceInstanceId": "03063893-cf9e-4f7a-9827-067f6fa9dd03", "serviceName": "npcf-ue-policy-control", "versions": [ { "apiVersionInUri": "v1", "apiFullVersion": "1.0.0", "expiry": null } ], "scheme": "http", "nfServiceStatus": "REGISTERED", "fqdn": "occnp-ocpm-ingress-gateway.ocpcf.svc", "interPlmnFqdn": null, "ipEndPoints": null, "apiPrefix": null, "defaultNotificationSubscriptions": null, "allowedPlmns": null, "allowedNfTypes": [ "AMF" ], "allowedNfDomains": null, "allowedNssais": null, "priority": null, "capacity": null, "load": null, "recoveryTime": null, "supportedFeatures": null } ]}]
      enableF3=true
      enableF5=true
      renewalTimeBeforeExpiry=3600
      validityTime=30
      enableSubscriptionAutoRenewal=true
      acceptAdditionalAttributes=false
      supportedDataSetId=POLICY

  nrf-client-nfdiscovery:
    envJaegerSamplerParam: '1'
    envJaegerSamplerType: ratelimiting
    envJaegerServiceName: pcf-nrf-client-nfdiscovery

  nrf-client-nfmanagement:
    envJaegerSamplerParam: '1'
    envJaegerSamplerType: ratelimiting
    envJaegerServiceName: pcf-nrf-client-nfmanagement

appinfo:
  serviceAccountName: ''
  # Set Infrastructure services to empty array if any one of below condition is met 
  #  1. Deploying on occne 1.4 or lesser version
  #  2. Not deploying on OCCNE
  #  3. Do not wish to monitor infra services such as db-monitor service
  # then the below mentioned attribute 'infra_services' should be uncommneted and epmty array should be passed as already mentioned.
  #infraServices: []

perf-info:
  configmapPerformance:
    prometheus: ''

diam-connector:
  envDiameterRealm: 'oracle.com'
  envDiameterIdentity: 'ocpcf'

diam-gateway:
  #The diam-gateway mode i.e. converged, bsf, pcf and pcrf
  envGatewayMode: pcf
  #The diam-gateway deployment type (applicable only when mode is converged) i.e. CONVERGED, PCF and PCRF
  envGatewayDeploymentType: PCF
  envDiameterRealm: 'oracle.com'
  envDiameterIdentity: 'oc-diam-gateway'
  enableConfigService: true

policyds:
  envMysqlDatabaseConfigServer: 'occnp_config_server'

ldap-gateway:
  serviceAccountName: ''

binding:
  envMysqlDatabase: occnp_binding
  bsfEnabled: false

ingress-gateway:
  #Service Mesh (Istio) to take care of load-balancing
  serviceMeshCheck: false
  jaegerTracingEnabled: true
  openTracing :
    jaeger:
      udpSender:
        # udpsender host
        host: "occne-tracer-jaeger-agent.occne-infra"
        # udpsender port
        port: 6831
      probabilisticSampler: 1.0

  # ----OAUTH CONFIGURATION - BEGIN ----
  oauthValidatorEnabled: false
  nfInstanceId: 6faf1bbc-6e4a-4454-a507-a14ef8e1bc11
  allowedClockSkewSeconds: 0
  nrfPublicKeyKubeSecret: ''
  nrfPublicKeyKubeNamespace: ''
  validationType: relaxed
  producerPlmnMNC: 123
  producerPlmnMCC: 456
  # ----OAUTH CONFIGURATION - END ----

  # Enable it to accept incoming http requests
  enableIncomingHttp: true

  # ---- HTTPS Configuration - BEGIN ----
  enableIncomingHttps: false

  service:
    ssl:
      privateKey:
        k8SecretName: occnp-gateway-secret
        k8NameSpace: occnp
        rsa:
          fileName: rsa_private_key_pkcs1.pem
      certificate:
        k8SecretName: occnp-gateway-secret
        k8NameSpace: occnp
        rsa:
          fileName: ocegress.cer
      caBundle:
        k8SecretName: occnp-gateway-secret
        k8NameSpace: occnp
        fileName: caroot.cer
      keyStorePassword:
        k8SecretName: occnp-gateway-secret
        k8NameSpace: occnp
        fileName: key.txt
      trustStorePassword:
        k8SecretName: occnp-gateway-secret
        k8NameSpace: occnp
        fileName: trust.txt


egress-gateway:
  jaegerTracingEnabled: true
  openTracing :
    jaeger:
      udpSender:
        # udpsender host
        host: "occne-tracer-jaeger-agent.occne-infra"
        # udpsender port
        port: 6831
      probabilisticSampler: 0.5

  # ---- Oauth Configuration - BEGIN ----
  oauthClientEnabled: false
  nrfAuthority: 10.75.224.7:8085
  nfInstanceId: fe7d992b-0541-4c7d-ab84-c6d70b1b01b1
  consumerPlmnMNC: 345
  consumerPlmnMCC: 567
  # ---- Oauth Configuration - END ----

  # ---- HTTPS Configuration - BEGIN ----

  #Enabling it for egress https requests
  enableOutgoingHttps: false

  egressGwCertReloadEnabled: false
  egressGwCertReloadPath: /egress-gw/store/reload

  service:
    ssl:
      privateKey:
        k8SecretName: ocpcf-gateway-secret
        k8NameSpace: ocpcf
        rsa:
          fileName: rsa_private_key_pkcs1.pem
        ecdsa:
          fileName: ssl_ecdsa_private_key.pem
      certificate:
        k8SecretName: ocpcf-gateway-secret
        k8NameSpace: ocpcf
        rsa:
          fileName: ocegress.cer
        ecdsa:
          fileName: ssl_ecdsa_certificate.crt
      caBundle:
        k8SecretName: ocpcf-gateway-secret
        k8NameSpace: ocpcf
        fileName: caroot.cer
      keyStorePassword:
        k8SecretName: ocpcf-gateway-secret
        k8NameSpace: ocpcf
        fileName: key.txt
      trustStorePassword:
        k8SecretName: ocpcf-gateway-secret
        k8NameSpace: ocpcf
        fileName: trust.txt
  # ---- HTTPS Configuration - END ----

  # ---- SCP Configuration - BEGIN ----
  # globalretry can be enabled only when scpRerouteEnabled flag is set to true. This is an OPTIONAL configuration. And
  # it is applied only when no "retries" specified under routesConfig
  globalretry:
    enabled: false
    retries: 2

  # Below is a basic route configuration for SCP. This configuration routes all egress traffic towards SCP.
  # filterName1 - (fixed value)should be set to ScpFilter
  # The retry section (fliterName2) is required only when there is a need to retry the requests. Retry will be sent to secondary SCP, if no secondary configured then retry will happen on primary.
  # filterName2.name - (fixed value) should have the value ScpRetry.
  # filterName2.retries - (Customizable value) number of retries can be done for a request
  # filterName2.methods - (Customizable value) HTTP request methods for which retries should be done.
  # filterName2.statuses - (Customizable value) HTTP status received on response for which request should be retried.

  #routesConfig:
  #- id: scp_route
  #  uri: https://dummy.dontchange
  #  path: /**
  #  order: 1
  #  filterName1: ScpFilter
  #  filterName2:
  #    name: ScpRetry
  #    retries: 1
  #    methods: GET, POST, PUT, DELETE, PATCH
  #    statuses: INTERNAL_SERVER_ERROR, BAD_GATEWAY
  
  scp:
    # Change this to true when scp integration is required. Below SCP configurations will take effect only when this is 'true'.
    scpIntegrationEnabled: false

    # Default scheme applicable when 3gpp-sbi-target-apiroot header is missing
    scpDefaultScheme: http

    # Set this flag to true if re-routing to multiple SCP instances is to be enabled.
    scpRerouteEnabled: false
    #globalretry can be enabled only when scpRerouteEnabled flag is set to true.

    # Configure the SCP instance(s) host/IP and port.
    # At least one SCP host details (under http or https) is required when scpIntegrationEnabled
    # In this example scp-host-1 is primary SCP and scp-host-1 is secondary SCP.
    instances:
      http:
        - host: scp-host-1
          port: 80
          apiPrefix: "/"
        - host: scp-host-2
          port: 80
          apiPrefix: "/"
      https:
        - host: scp-host-1
          port: 443
          apiPrefix: "/"
        - host: scp-host-2
          port: 443
          apiPrefix: "/"

  # ---- SCP Configuration - END ----


  #Enable this if loadbalancing is to be done by egress instead of K8s
  K8ServiceCheck: false

